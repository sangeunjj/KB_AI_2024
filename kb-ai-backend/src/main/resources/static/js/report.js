// Î™®Îã¨ Ïó¥Í∏∞
function openModal() {
    document.getElementById("companyModal").style.display = "block";
    loadCompanies();
}

// Î™®Îã¨ Îã´Í∏∞
function closeModal() {
    document.getElementById("companyModal").style.display = "none";
}

// Î™®Îã¨ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
window.onclick = function (event) {
    if (event.target === document.getElementById("companyModal")) {
        closeModal();
    }
}

// ÌöåÏÇ¨ ÏÑ†ÌÉù: APIÏóêÏÑú ÌöåÏÇ¨ Î™©Î°ùÏùÑ Í∞ÄÏ†∏ÏôÄÏÑú Î™®Îã¨Ïóê ÌëúÏãú
function loadCompanies() {
    fetch('/api/company/ABC')
        .then(response => response.json())
        .then(data => {
            console.log(data); // ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏

            const companyList1 = document.getElementById("companyList1");
            const companyList2 = document.getElementById("companyList2");
            const companyList3 = document.getElementById("companyList3");

            // Î¶¨Ïä§Ìä∏ Ï¥àÍ∏∞Ìôî
            companyList1.innerHTML = "";
            companyList2.innerHTML = "";
            companyList3.innerHTML = "";

            let currentGroup = ''; // ÌòÑÏû¨ ÏûêÏùå Í∑∏Î£π

            data.forEach((company, index) => {
                const firstLetter = getFirstLetter(company.companyName); // Ï≤´ Í∏ÄÏûê ÎòêÎäî ÏûêÏùå Ï∂îÏ∂ú

                // ÏÉàÎ°úÏö¥ Í∑∏Î£πÏù¥ ÏãúÏûëÎêòÎ©¥ Í∑∏Î£π Ìó§ÎçîÎ•º Ï∂îÍ∞Ä
                if (firstLetter !== currentGroup) {
                    currentGroup = firstLetter;

                    // Í∑∏Î£π Ìó§ÎçîÎ•º Í∞Å Î¶¨Ïä§Ìä∏Ïóê Ï∂îÍ∞Ä
                    const groupHeader = document.createElement("div");
                    groupHeader.textContent = currentGroup;
                    groupHeader.classList.add("group-header");

                    if (index % 3 === 0) companyList1.appendChild(groupHeader);
                    else if (index % 3 === 1) companyList2.appendChild(groupHeader);
                    else companyList3.appendChild(groupHeader);
                }

                // Í∏∞ÏóÖÎ™Ö Ìï≠Î™© Ï∂îÍ∞Ä
                const li = document.createElement("div");
                li.textContent = company.companyName;
                li.classList.add("company-item");

                // ÌöåÏÇ¨ ÏÑ†ÌÉù Ïãú Î≤ÑÌäºÏóê Ïù¥Î¶Ñ ÌëúÏãú
                li.onclick = function () {
                    selectCompany(company.companyName, company.companyCode); // Ïù¥Î¶ÑÍ≥º ÏΩîÎìúÎ•º ÎÑòÍπÄ
                };

                // Í∏∞ÏóÖÎ™ÖÏùÑ 3Í∞úÏùò Î¶¨Ïä§Ìä∏Ïóê ÎÇòÎàÑÏñ¥ Ï∂îÍ∞Ä
                if (index % 3 === 0) companyList1.appendChild(li);
                else if (index % 3 === 1) companyList2.appendChild(li);
                else companyList3.appendChild(li);
            });
        })
        .catch(error => console.error('Error:', error));
}

// ÌïúÍ∏ÄÏùò Ï≤´ ÏûêÏùå ÎòêÎäî ÏòÅÏñ¥Ïùò Ï≤´ Í∏ÄÏûêÎ•º Ï∂îÏ∂úÌïòÎäî Ìï®Ïàò
function getFirstLetter(str) {
    const firstChar = str.charAt(0);
    const unicode = firstChar.charCodeAt(0) - 44032;

    if (unicode >= 0 && unicode <= 11171) { // ÌïúÍ∏Ä Ï¥àÏÑ± Î≤îÏúÑ ÌôïÏù∏
        const consonants = ["„Ñ±", "„Ñ≤", "„Ñ¥", "„Ñ∑", "„Ñ∏", "„Ñπ", "„ÖÅ", "„ÖÇ", "„ÖÉ", "„ÖÖ", "„ÖÜ", "„Öá", "„Öà", "„Öâ", "„Öä", "„Öã", "„Öå", "„Öç", "„Öé"];
        const firstConsonantIndex = Math.floor(unicode / 588);
        return consonants[firstConsonantIndex];
    } else {
        return firstChar.toUpperCase(); // ÏòÅÏñ¥Ïùò Í≤ΩÏö∞ Ï≤´ Í∏ÄÏûêÎ•º Î∞òÌôò (ÎåÄÎ¨∏ÏûêÎ°ú Î≥ÄÌôò)
    }
}

// ÌîºÏ≤ò ÏÑ†ÌÉù Î≤ÑÌäº (ÏÑ†ÌÉùÏãú ÎÖ∏ÎûÄÏÉâÏúºÎ°ú Î≥ÄÌï®, Ïó¨Îü¨ Í∞ú ÏÑ†ÌÉù Í∞ÄÎä•)
document.querySelectorAll('.feature-button').forEach(button => {
    button.addEventListener('click', function () {
        if (this.id === "allButton") {
            // "Ï†ÑÏ≤¥" Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ï†ÑÏ≤¥ ÎÖ∏ÎûÄÏÉâÏúºÎ°ú ÏÑ†ÌÉùÎê®
            const allSelected = this.classList.contains('selected');
            document.querySelectorAll('.feature-button').forEach(btn => {
                if (allSelected) {
                    btn.classList.remove('selected'); // Î™®Îëê ÏÑ†ÌÉù Ìï¥Ï†ú
                } else {
                    btn.classList.add('selected'); // Î™®Îëê ÏÑ†ÌÉù
                }
            });
        } else {
            // Í∞úÎ≥Ñ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú
            this.classList.toggle('selected');
        }
    });
});

// ÏÑ†ÌÉùÌïú ÌöåÏÇ¨Ïùò Í∏∞ÏóÖÏΩîÎìúÎ•º Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
function getSelectedCompanies() {
    return Array.from(document.querySelectorAll('.button'))
        .filter(button => button.textContent.trim() !== '+')
        .map(button => button.dataset.companyCode); // ÏÑ†ÌÉùÌïú Î≤ÑÌäºÏùò Îç∞Ïù¥ÌÑ∞ ÏÜçÏÑ±ÏóêÏÑú Í∏∞ÏóÖÏΩîÎìú Í∞ÄÏ†∏Ïò¥
}

// ÏÑ†ÌÉùÌïú ÌîºÏ≤ò ÏïåÏïÑÎÇ¥Í∏∞
function getSelectedFeatures() {
    return Array.from(document.querySelectorAll('.feature-button.selected'))
        .map(button => button.textContent.trim());
}

let fetchedData = []; // Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû•Ìï† Î≥ÄÏàò

// ÏÑ†ÌÉùÌïú Í∏∞ÏóÖÍ≥º ÌîºÏ≤òÏóê Îî∞Îùº Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏ÏôÄÏÑú ÏãúÍ∞ÅÌôîÌïòÎäî Ìï®Ïàò
function fetchCompanyData() {
    const companies = getSelectedCompanies();
    const features = getSelectedFeatures();

    fetch(`/api/company/features?companyCodes=${companies.join(',')}&features=${features.join(',')}`)
        .then(response => response.json())
        .then(data => {
            fetchedData = data; // Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû•
            console.log(data); // Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÎπÑÍµê Í≤∞Í≥ºÎ•º ÌëúÏãú
            visualizeData(data, features);
        })
        .catch(error => console.error('Error:', error));
}

// Îç∞Ïù¥ÌÑ∞ ÏãúÍ∞ÅÌôî Ïñ¥ÎîîÎ°ú Ìï†ÏßÄ Ï†ïÌïòÎäî Í∞àÎ¶ºÍ∏∏ Í∞ôÏùÄÍ±∞
function visualizeData(data, features) {
    const ctx1 = document.getElementById('activityChart').getContext('2d');

    if (features.includes('ESG')) {
        visualizeESGData(data, ctx1);
    }
    if (features.includes('ÌôúÎèôÏÑ± ÏßÄÌëú')) {
        visualizeActivityMetrics(data, ctx1);
    }
    if (features.includes('ÏÑ±Ïû•ÏÑ± ÏßÄÌëú')) {
        visualizeGrowthMetrics(data, ctx1);
    }
    if (features.includes('ÏïàÏ†ïÏÑ± ÏßÄÌëú')) {
        visualizeStabilityMetrics(data, ctx1);
    }
    if (features.includes('ÏàòÏùµÏÑ± ÏßÄÌëú')) {
        visualizeProfitabilityMetrics(data, ctx1); // Ï∞®Ìä∏Î•º Ï∂îÍ∞ÄÏ†ÅÏúºÎ°ú Ìï†ÎãπÌïòÍ±∞ÎÇò ÍµêÏ≤¥Ìï† Ïàò ÏûàÏùå
    }
}

/* üí° ESG Îç∞Ïù¥ÌÑ∞ -> ÏàòÏπòÎ°ú Î≥ÄÍ≤Ω üí°*/
function gradeToNumber(grade) {
    const gradeMapping = {
        "A+": 4.3, "A": 4.0, "B+": 3.3, "B": 3.0,
        "C+": 2.3, "C": 2.0, "D+": 1.3, "D": 1.0
        // ÌïÑÏöîÌïú Í≤ΩÏö∞ Îçî ÎßéÏùÄ Îß§Ìïë Ï∂îÍ∞Ä Í∞ÄÎä•
    };
    return gradeMapping[grade] || 0; // Îß§ÌïëÏóê ÏóÜÎäî Í≤ΩÏö∞ 0ÏúºÎ°ú Ï≤òÎ¶¨
}

// ESG ÏßÄÌëú ÏãúÍ∞ÅÌôî
function visualizeESGData(data, ctx) {
    const labels = ['ÌôòÍ≤Ω(Environmental)', 'ÏÇ¨Ìöå(Social)', 'ÏßÄÎ∞∞Íµ¨Ï°∞(Governance)', 'ESG ÌÜµÌï©'];
    const pastelColors = [
        'rgba(0, 102, 204, 0.8)',   // Blue
        'rgba(34, 139, 34, 0.8)',   // Dark Green
        'rgba(178, 34, 34, 0.8)'    // Dark Red
    ];
    const chartData = data.map((company, index) => ({
        label: company.companyName,
        data: [
            gradeToNumber(company.ESG_23_e), gradeToNumber(company.ESG_23_s), gradeToNumber(company.ESG_23_g), gradeToNumber(company.ESG_23)
        ],
        backgroundColor: pastelColors[index],
        borderColor: pastelColors[index].replace('0.8', '1'),
        borderWidth: 1
    }));

    // Ï≤´ Î≤àÏß∏ Ï∞®Ìä∏: ÎßâÎåÄ Í∑∏ÎûòÌîÑ
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: chartData
        },
        options: {
            scales: {
                x: {
                    ticks: {
                        color: 'black', // Ï∂ï Í∏ÄÏî® ÏÉâÏÉÅ
                        font: {
                            size: 14 // Ï∂ï Í∏ÄÏî® ÌÅ¨Í∏∞
                        }
                    },
                    barPercentage: 0.5, // ÎßâÎåÄ Ìè≠ ÏÑ§Ï†ï
                    categoryPercentage: 0.7 // Î≤îÏ£º Í∞Ñ Í∞ÑÍ≤© ÏÑ§Ï†ï
                },
                y: {
                    beginAtZero: true,
                    max: 5,
                    ticks: {
                        color: 'black', // Ï∂ï Í∏ÄÏî® ÏÉâÏÉÅ
                        font: {
                            size: 14 // Ï∂ï Í∏ÄÏî® ÌÅ¨Í∏∞
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        font: {
                            size: 14 // Î≤îÎ°Ä Í∏ÄÏî® ÌÅ¨Í∏∞
                        }
                    }
                }
            },
            animation: false
        }
    });
}

// ÌôúÎèôÏÑ± ÏßÄÌëú ÏãúÍ∞ÅÌôî
function visualizeActivityMetrics(data, ctx) {
    const labels = ['Ï¥ùÏûêÏÇ∞ÌöåÏ†ÑÏú®', 'Îß§Ï∂úÏ±ÑÍ∂åÌöåÏ†ÑÏú®', 'Ïû¨Í≥†ÏûêÏÇ∞ÌöåÏ†ÑÏú®'];
    const pastelColors = [
        'rgba(0, 102, 204, 0.8)',   // Blue
        'rgba(34, 139, 34, 0.8)',   // Dark Green
        'rgba(178, 34, 34, 0.8)'    // Dark Red
    ];

    const chartData = data.map((company, index) => ({
        label: company.companyName,
        data: Object.values(company['ÌôúÎèôÏÑ± ÏßÄÌëú']),
        backgroundColor: pastelColors[index],
        borderColor: pastelColors[index].replace('0.8', '1'),
        borderWidth: 1
    }));

    // Ï∞®Ìä∏ Í∑∏Î¶¨Í∏∞
    window.activityChart = new Chart(ctx, {
        type: 'bar', // Radar Chart ÏÇ¨Ïö©
        data: {
            labels: labels,
            datasets: chartData
        },
        options: {
            scales: {
                x: {
                    ticks: {
                        color: 'black',
                        font: {
                            size: 14
                        }
                    }
                },
                y: {
                    beginAtZero: true,
                    ticks: {
                        color: 'black',
                        font: {
                            size: 14
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        font: {
                            size: 14
                        }
                    }
                }
            },
            animation: false
        }
    });
}

// ÏÑ±Ïû•ÏÑ± ÏßÄÌëú ÏãúÍ∞ÅÌôî
function visualizeGrowthMetrics(data, ctx) {
    const labels = ['Îß§Ï∂úÏï°Ï¶ùÍ∞ÄÏú®(YoY)', 'ÏòÅÏóÖÏù¥ÏùµÏ¶ùÍ∞ÄÏú®(YoY)', 'ÏàúÏù¥ÏùµÏ¶ùÍ∞ÄÏú®(YoY)', 'Ï¥ùÌè¨Í¥ÑÏù¥ÏùµÏ¶ùÍ∞ÄÏú®(YoY)'];
    const pastelColors = [
        'rgba(0, 102, 204, 0.8)',   // Blue
        'rgba(34, 139, 34, 0.8)',   // Dark Green
        'rgba(178, 34, 34, 0.8)'    // Dark Red
    ];

    const chartData = data.map((company, index) => ({
        label: company.companyName,
        data: Object.values(company['ÏÑ±Ïû•ÏÑ± ÏßÄÌëú']),
        backgroundColor: pastelColors[index],
        borderColor: pastelColors[index].replace('0.8', '1'),
        borderWidth: 1
    }));

    new Chart(ctx, {
        type: 'bar', // ÏÑ±Ïû•ÏÑ± ÏßÄÌëúÏóê Ï†ÅÌï©Ìïú Ï∞®Ìä∏ ÌÉÄÏûÖ
        data: {
            labels: labels,
            datasets: chartData
        },
        options: {
            scales: {
                x: {
                    ticks: {
                        color: 'black',
                        font: {
                            size: 14
                        }
                    }
                },
                y: {
                    beginAtZero: true,
                    ticks: {
                        color: 'black',
                        font: {
                            size: 14
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        font: {
                            size: 14
                        }
                    }
                }
            },
            animation: false
        }
    });
}

// ÏàòÏùµÏÑ± ÏßÄÌëú ÏãúÍ∞ÅÌôî
function visualizeProfitabilityMetrics(data, ctx) {
    const labels = ['ÏàúÏù¥ÏùµÎ•†', 'Îß§Ï∂úÏ¥ùÏù¥ÏùµÎ•†', 'ÏûêÍ∏∞ÏûêÎ≥∏ÏòÅÏóÖÏù¥ÏùµÎ•†'];
    const pastelColors = [
        'rgba(0, 102, 204, 0.8)',   // Blue
        'rgba(34, 139, 34, 0.8)',   // Dark Green
        'rgba(178, 34, 34, 0.8)'    // Dark Red
    ];
    const chartData = data.map((company, index) => ({
        label: company.companyName,
        data: Object.values(company['ÏàòÏùµÏÑ± ÏßÄÌëú']),
        backgroundColor: pastelColors[index],
        borderColor: pastelColors[index].replace('0.8', '1'),
        borderWidth: 1
    }));

    new Chart(ctx, {
        type: 'bar', // ÏàòÏùµÏÑ± ÏßÄÌëúÏóê Ï†ÅÌï©Ìïú Ï∞®Ìä∏ ÌÉÄÏûÖ
        data: {
            labels: labels,
            datasets: chartData
        },
        options: {
            scales: {
                x: {
                    ticks: {
                        color: 'black',
                        font: {
                            size: 14
                        }
                    }
                },
                y: {
                    beginAtZero: true,
                    ticks: {
                        color: 'black',
                        font: {
                            size: 14
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        font: {
                            size: 14
                        }
                    }
                }
            },
            animation: false
        }
    });
}


// ÏïàÏ†ïÏÑ± ÏßÄÌëú ÏãúÍ∞ÅÌôî
function visualizeStabilityMetrics(data, ctx) {
    const labels = ['ÏûêÍ∏∞ÏûêÎ≥∏ÎπÑÏú®', 'Î∂ÄÏ±ÑÎπÑÏú®', 'Ïú†ÎèôÎπÑÏú®'];
    const pastelColors = [
        'rgba(0, 102, 204, 0.8)',   // Blue
        'rgba(34, 139, 34, 0.8)',   // Dark Green
        'rgba(178, 34, 34, 0.8)'    // Dark Red
    ];
    const chartData = data.map((company, index) => ({
        label: company.companyName,
        data: Object.values(company['ÏïàÏ†ïÏÑ± ÏßÄÌëú']),
        backgroundColor: pastelColors[index],
        borderColor: pastelColors[index].replace('0.8', '1'),
        borderWidth: 1
    }));

    new Chart(ctx, {
        type: 'bar', // ÏïàÏ†ïÏÑ± ÏßÄÌëúÏóê Ï†ÅÌï©Ìïú Ï∞®Ìä∏ ÌÉÄÏûÖ
        data: {
            labels: labels,
            datasets: chartData
        },
        options: {
            plugins: {
                legend: {
                    labels: {
                        font: {
                            size: 14
                        }
                    }
                }
            },
            animation: false
        }
    });
}

// ÌöåÏÇ¨ ÏÑ†ÌÉù Ïãú Î≤ÑÌäºÏóê Ïù¥Î¶Ñ ÌëúÏãú
// Ï≤òÏùåÏúºÎ°ú + ÌëúÏãúÍ∞Ä ÏûàÎäî Î≤ÑÌäºÏùÑ Ï∞æÏïÑ Í∑∏ Î≤ÑÌäºÏùò ÌÖçÏä§Ìä∏Î•º ÏÑ†ÌÉùÌïú ÌöåÏÇ¨ Ïù¥Î¶ÑÏúºÎ°ú Î≥ÄÍ≤Ω
function selectCompany(companyName, companyCode) {
    const buttons = document.querySelectorAll('.button');
    const emptyButton = Array.from(buttons).find(button => button.textContent.trim() === '+');
    if (emptyButton) {
        emptyButton.textContent = companyName; // Í∏∞ÏóÖÎ™ÖÎßå Î≤ÑÌäºÏóê ÌëúÏãú
        emptyButton.dataset.companyCode = companyCode; // ÌöåÏÇ¨ ÏΩîÎìúÎäî Îç∞Ïù¥ÌÑ∞ ÏÜçÏÑ±Ïóê Ï†ÄÏû•
        closeModal();
    }
}

// ÎûúÎç§Ìïú ÏÉâÏÉÅÏùÑ ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
function getRandomColor() {
    const colors = [
        'rgba(0, 102, 204, 0.8)',   // Blue
        'rgba(34, 139, 34, 0.8)',   // Dark Green
        'rgba(178, 34, 34, 0.8)'    // Dark Red
    ];
    return colors[Math.floor(Math.random() * colors.length)];
}